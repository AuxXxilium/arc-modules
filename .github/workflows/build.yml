#
# Copyright (C) 2023 AuxXxilium <https://github.com/AuxXxilium> and Ing <https://github.com/wjz304>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#

# version: [ 7.1, 7.2 ]
# platform: [ apollolake, broadwell, broadwellnk, denverton, epyc7002, geminilake, purley, r1000, v1000 ]
# exclude:
#   - version: 7.1
#     platform: broadwell
# include:
#   - version: "7.2"
#     platform: "broadwell"

name: Build Modules

on:
  workflow_dispatch:
    inputs:
      prerelease:
        description: 'pre release'
        default: false
        type: boolean
    make:
      description: 'make'
      default: true
      type: boolean

jobs:
  build:
    strategy:
      matrix:
        include:
          - version: 7.1 
            platform: apollolake
          - version: 7.1
            platform: broadwell
          - version: 7.1 
            platform: broadwellnk
          - version: 7.1
            platform: denverton
          #- version: 7.1
          #  platform: epyc7002
          - version: 7.1 
            platform: geminilake
          #- version: 7.1 
          #  platform: purley
          - version: 7.1
            platform: r1000
          - version: 7.1
            platform: v1000

          - version: 7.2 
            platform: apollolake
          - version: 7.2
            platform: broadwell
          - version: 7.2 
            platform: broadwellnk
          - version: 7.2
            platform: denverton
          #- version: 7.2
          #  platform: epyc7002
          - version: 7.2 
            platform: geminilake
          #- version: 7.2 
          #  platform: purley
          - version: 7.2
            platform: r1000
          - version: 7.2
            platform: v1000

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Init Env
        run: |
          git config --global user.email "info@auxxxilium.tech"
          git config --global user.name "AuxXxilium"
          sudo timedatectl set-timezone "Europe/Berlin" 

      - name: Get EnvDeploy
        run: |
          ROOT_PATH=${{ github.workspace }}

          git clone https://github.com/SynologyOpenSource/pkgscripts-ng.git ${ROOT_PATH}/pkgscripts-ng
          cd ${ROOT_PATH}/pkgscripts-ng
          git checkout DSM${{ matrix.version }}
          sudo ./EnvDeploy -v ${{ matrix.version }} -l  # Get Available platforms
          sudo ./EnvDeploy -q -v ${{ matrix.version }} -p ${{ matrix.platform }}

          #ENV
          mkdir -p ${ROOT_PATH}/source

          ENV_PATH=${ROOT_PATH}/build_env/ds.${{ matrix.platform }}-${{ matrix.version }}
          sudo cp -al ${ROOT_PATH}/pkgscripts-ng ${ENV_PATH}/

          sudo chroot ${ENV_PATH} << "EOF"
          cd pkgscripts

          version=${{ matrix.version }}; [ ${version:0:1} -gt 6 ] && sed -i 's/print(" ".join(kernels))/pass #&/' ProjectDepends.py
          sed -i '/PLATFORM_FAMILY/a\\techo "PRODUCT=$PRODUCT" >> $file\n\techo "KSRC=$KERNEL_SEARCH_PATH" >> $file\n\techo "LINUX_SRC=$KERNEL_SEARCH_PATH" >> $file' include/build
          ./SynoBuild -c -p ${{ matrix.platform }}

          while read line; do if [ ${line:0:1} != "#" ]; then export ${line%%=*}="${line#*=}"; fi; done < /env${BUILD_ARCH}.mak
          if [ -f "${KSRC}/Makefile" ]; then
            # gcc issue "unrecognized command-line option '--param=allow-store-data-races=0'".
            [ "${{ matrix.version }}" == "7.2" ] && sed -i 's/--param=allow-store-data-races=0/--allow-store-data-races/g' ${KSRC}/Makefile

            VERSION=`cat ${KSRC}/Makefile | grep ^VERSION | awk -F' ' '{print $3}'`
            PATCHLEVEL=`cat ${KSRC}/Makefile | grep ^PATCHLEVEL | awk -F' ' '{print $3}'`
            SUBLEVEL=`cat ${KSRC}/Makefile | grep ^SUBLEVEL | awk -F' ' '{print $3}'`
            [ -f "/env32.mak" ] && echo "KVER=${VERSION}.${PATCHLEVEL}.${SUBLEVEL}" >> /env32.mak
            [ -f "/env64.mak" ] && echo "KVER=${VERSION}.${PATCHLEVEL}.${SUBLEVEL}" >> /env64.mak
            CCVER=`$CC --version | head -n 1 | awk -F' ' '{print $3}'`
            [ -f "/env32.mak" ] && echo "CCVER=${CCVER}" >> /env32.mak
            [ -f "/env64.mak" ] && echo "CCVER=${CCVER}" >> /env64.mak
          fi
          EOF

          [ -f ${ENV_PATH}/env64.mak ] && ENV_FILE=${ENV_PATH}/env64.mak || ([ -f ${ENV_PATH}/env32.mak ] && ENV_FILE=${ENV_PATH}/env32.mak)
          if [ -n "${ENV_FILE}" ]; then
            KVER=`grep 'KVER=' ${ENV_FILE} | awk -F'=' '{print $2}'`
            CCVER=`grep 'CCVER=' ${ENV_FILE} | awk -F'=' '{print $2}'`
            [ -n "${KVER}" ] && echo "KVER=${KVER}" >> $GITHUB_ENV
            [ -n "${CCVER}" ] && echo "CCVER=${CCVER}" >> $GITHUB_ENV
          fi

      - name: Get Src
        run: |
          ROOT_PATH=${{ github.workspace }}

          mkdir -p ${ROOT_PATH}/source/output
          repo=${{ env.repo }}
          KVER=${{ env.KVER }}

          sudo cp -a ${ROOT_PATH}/src/${KVER:0:1}.x ${ROOT_PATH}/source/input

          sudo cp -a ${ROOT_PATH}/source ${ROOT_PATH}/build_env/ds.${{ matrix.platform }}-${{ matrix.version }}/

      - name: Make
        if: success() && inputs.make == true
        run: |
          ROOT_PATH=${{ github.workspace }}

          sudo chroot build_env/ds.${{ matrix.platform }}-${{ matrix.version }} << "EOF"
          sed -i 's/^CFLAGS=/#CFLAGS=/g; s/^CXXFLAGS=/#CXXFLAGS=/g' /env${BUILD_ARCH}.mak
          while read line; do if [ ${line:0:1} != "#" ]; then export ${line%%=*}="${line#*=}"; fi; done < /env${BUILD_ARCH}.mak
          cd /source/input
          [ -z "`grep 'env.mak' Makefile`" ] && sed -i '1 i include /env.mak' Makefile

          if [ -f "defines.${{ matrix.platform }}" ]; then
            PARMS+=" `cat "defines.${{ matrix.platform }}" | xargs`"
          else
            echo "[E] ${{ matrix.platform }}-${{ matrix.version }}"
          fi
          make -j`nproc` -C "${KSRC}" M="${PWD}" ${PARMS} modules
          while read F; do
            strip -g "${F}"
            echo "Copying `basename ${F}`"
            cp "${F}" "/source/output"
          done < <(find ${PWD} -name \*.ko)
          EOF

          sudo cp -a ${ROOT_PATH}/build_env/ds.${{ matrix.platform }}-${{ matrix.version }}/source/output ${ROOT_PATH}/source/
          sudo chmod a+rw -R ${ROOT_PATH}/source/output

      - name: Tar to Artifacts
        run: |
          if [ ! -d "${{ github.workspace }}/source/output" ]; then
            mkdir -p "${{ github.workspace }}/source/output"
            chmod a+rw -R "${{ github.workspace }}/source/output"
          fi

          OFFICIAL_PATH="${{ github.workspace }}/official/hda1/${{ matrix.platform }}-${{ env.KVER }}"
          PARTY3RD_PATH="${{ github.workspace }}/thirdparty/${{ matrix.platform }}-${{ env.KVER }}"

          echo "copy official modules"
          OM=(cpufreq_performance i915 processor ehci-hcd ehci-pci uhci-hcd xhci-hcd xhci-pci)
          for M in ${OM[@]}; do
            function _copydepends() {
              [ -f "${OFFICIAL_PATH}/${1}" ] && [ ! -f "${OFFICIAL_PATH/hda1/rd}/${1}" ] && cp -f "${OFFICIAL_PATH}/${1}" "${{ github.workspace }}/source/output"
              depends=($(modinfo "${OFFICIAL_PATH}/${1}" | grep depends: | awk -F: '{print $2}' | awk '$1=$1' | sed 's/,/ /g'))
              if [ ${#depends[*]} -gt 0 ]; then
                for k in ${depends[@]}; do
                  _copydepends "${k}.ko"
                done
              fi
            }
            _copydepends "${M}.ko"
          done

          echo "copy 3rd modules"
          [ -d "${PARTY3RD_PATH}" ] && cp -Rvf "${PARTY3RD_PATH}/." "${{ github.workspace }}/source/output"

          echo "check depends"
          for M in `ls ${{ github.workspace }}/source/output`; do
            depends=(`modinfo "${{ github.workspace }}/source/output/${M}" | grep depends: | awk -F: '{print $2}' | awk '$1=$1' | sed 's/,/ /g'`)
            if [ ${#depends[*]} -gt 0 ]; then
              for k in ${depends[@]}; do
                if [ ! -f "${{ github.workspace }}/source/output/${k}.ko" ]; then
                  [ -f "${OFFICIAL_PATH}/${k}.ko" ] && FLAG=O || FLAG=X
                  echo "[W][${FLAG}] '${{ matrix.platform }}-${{ env.KVER }}' - '${M}' depends '${k}' does not exist."
                fi
              done
            fi
          done
          tar caf ${{ github.workspace }}/source/${{ matrix.platform }}-${{ env.KVER }}.tgz -C ${{ github.workspace }}/source/output .

      - name: Upload to Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: modules
          path: |
            ${{ github.workspace }}/source/*.tgz
            
      - name: Clean
        run: |
          sudo rm -rf ${{ github.workspace }}/build_env/ds.${{ matrix.platform }}-${{ matrix.version }}/source/*


  firmware:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Download from Artifacts
        uses: actions/download-artifact@v3
        with:
          name: modules
          path: ./modules

      - name: Firmware
        run: |
          mkdir -p firmware

          echo "copy 3rd modules"
          PARTY3RD_PATH="${{ github.workspace }}/thirdparty/firmware"
          cp -rf ${PARTY3RD_PATH}/* firmware/

          echo "extract all modules"
          for F in ./modules/*.tgz; do mkdir "${F%.tgz}" && tar -xzf "${F}" -C "${F%.tgz}"; done
          
          echo "get firmware"
          SOURCE=/tmp/linux-firmware
          git clone https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git ${SOURCE}
          while read L; do
            if [ -e "${SOURCE}/${L}" ]; then
              mkdir -p "`dirname firmware/${L}`"
              cp "${SOURCE}/${L}" "firmware/${L}"
            else
              [ -e "firmware/${L}" ] && echo "Used thirdparty ${L}" || echo "Missing ${L}"
            fi
          done < <(find ./modules -name \*.ko -exec sh -c '/sbin/modinfo {} | grep ^firmware' \; | awk '{print $2}')

          tar caf firmware.tgz -C firmware .


      - name: Upload to Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: modules
          path: |
            firmware.tgz


  release:
    runs-on: ubuntu-latest
    needs: firmware
    steps:
      - name: Checkout
        uses: actions/checkout@main

      - name: Calculate Version
        run: |
          # Calculate Version
          VERSION=""
          LATEST_TAG="$(curl -skL "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r ".tag_name" 2>/dev/null)"
          if [ -n "${LATEST_TAG}" -a "$(echo ${LATEST_TAG} | cut -d '.' -f 1,2)" = "$(date +'%y.%-m')" ]; then  # format %y.%-m.$i
            VERSION="$(echo ${LATEST_TAG} | awk -F '.' '{$3=$3+1}1' OFS='.')"
          else
            VERSION="$(date +'%y.%-m').0"
          fi

          CHANGELOG=$(git log --pretty=format:"%s" ${LATEST_TAG}..HEAD | sort)
          if [ -n "${CHANGELOG}" ]; then
            echo "Changelog: ${CHANGELOG}"
            echo "${CHANGELOG}" >"modules/changelog.txt"
          else
            CHANGELOG='New Build Tree'
            echo "Changelog: ${CHANGELOG}"
            echo "${CHANGELOG}" >"modules/changelog.txt"
          fi

          if [ -n "${VERSION}" ]; then
            # Modify Source File
            echo "Version: ${VERSION}"
            echo "${VERSION}" >VERSION
            echo "VERSION=${VERSION}" >> $GITHUB_ENV

            git pull
            status=$(git status -s | awk '{printf " %s", $2}')
            if [ -n "${status}" ]; then
              git add ${status}
              git commit -m "build: ${VERSION}"
              git push -f
            fi
          fi

      - name: Download from Artifacts
        if: env.VERSION != ''
        uses: actions/download-artifact@v3
        with:
          name: modules
          path: ./modules

      - name: Zip Modules
        if: env.VERSION != ''
        run: |
          zip -9 modules.zip -j modules/*

      - name: Release
        uses: softprops/action-gh-release@v1
        if: env.VERSION != ''
        with:
          tag_name: ${{ env.VERSION }}
          files: |
              modules.zip
              ./modules/*.tgz
              ./modules/changelog.txt